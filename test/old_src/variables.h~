#include "definitions.h"

// Set initial input parameters
enum Ascale {
  AFS_2G = 0,
  AFS_4G,
  AFS_8G,
  AFS_16G
};

enum Gscale {
  GFS_250DPS = 0,
  GFS_500DPS,
  GFS_1000DPS,
  GFS_2000DPS
};

int wireFailures = 0;
int wireAttempts = 0;
int wireReportCount = 10000;
int state = 0;

String inputString = "";         // a string to hold incoming data

// PID variables
double kp=1.2;
double ki=0.001;
double kd=7.0;
double position=0, output=0, target=0;

double defaultTarget = 181.0;
double updateTarget = 0.0;

// Specify sensor full scale
int Gscale = GFS_250DPS;
int Ascale = AFS_2G;
float aRes, gRes; // scale resolutions per LSB for the sensors
  
uint8_t  power = 140;
uint8_t  direction = 1;
uint8_t  pauseToggle = 0;
uint8_t  reportToggle = 0;

uint8_t  blinkNormal = 1000;
uint8_t  blinkTilted = 100;
uint8_t  blinkOn = 1;
uint32_t blinkDelta = 0;
uint32_t blinkInterval = blinkTilted; 
uint32_t blinkNow;


int16_t accelCount[3];  // Stores the 16-bit signed accelerometer sensor output
float ax, ay, az;       // Stores the real accel value in g's
int16_t gyroCount[3];   // Stores the 16-bit signed gyro sensor output
float gx, gy, gz;       // Stores the real gyro value in degrees per seconds
float gyroBias[3] = {0, 0, 0}, accelBias[3] = {0, 0, 0}; // Bias corrections for gyro and accelerometer
int16_t tempCount;   // Stores the real internal chip temperature in degrees Celsius
float temperature;
float SelfTest[6];

uint32_t rateCount = 0;  // used to control display output rate

// parameters for 6 DoF sensor fusion calculations
float GyroMeasError = PI * (40.0f / 180.0f);     
float beta = sqrt(3.0f / 4.0f) * GyroMeasError;  // compute beta
float GyroMeasDrift = PI * (2.0f / 180.0f);      // gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
float zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;  
float pitch, yaw, roll;
float deltat = 0.0f;                              // integration interval for both filter schemes
uint32_t lastUpdate = 0, firstUpdate = 0;         // used to calculate integration interval
uint32_t Now = 0;                                 // used to calculate integration interval
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};            // vector to hold quaternion


